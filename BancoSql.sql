/*CRIA BANCO LIVRARIA*/
CREATE DATABASE LIVRARIA
GO

/*CONECTA AO BANCO*/
USE LIVRARIA
GO

/*CRIAR TABELA ENDEREÇO */
CREATE TABLE ENDERECO(
	ID_ENDERECO INT IDENTITY,
	RUA VARCHAR(200) NOT NULL,
	NUMERO INT NOT NULL CHECK(NUMERO > 0),
	BAIRRO VARCHAR(150) NOT NULL,
	CIDADE VARCHAR(150) NOT NULL,
	ESTADO CHAR(2) NOT NULL,
	COMPLEMENTO VARCHAR(100),
	CEP CHAR(8) NOT NULL CHECK(LEN(CEP) = 8),
	PRIMARY KEY(ID_ENDERECO)
)
GO

/*CRIA TABELA PESSOA*/
CREATE TABLE PESSOA(
	ID_PESSOA INT IDENTITY NOT NULL,
	NOME VARCHAR(200) NOT NULL,
	CPF CHAR(11) UNIQUE NOT NULL CHECK(LEN(CPF) = 11),
	EMAIL VARCHAR(100) UNIQUE,
	DATA_NASCIMENTO DATETIME NOT NULL CHECK(DATA_NASCIMENTO < GETDATE()),
	FK_EDERECO_PESSOA INT NOT NULL,
	PRIMARY KEY(ID_PESSOA),
	FOREIGN KEY(FK_EDERECO_PESSOA) REFERENCES ENDERECO(ID_ENDERECO)
)
GO

/*CRIAR TABELA TELEFONE*/
CREATE TABLE TELEFONE(
	ID_TELEFONE INT IDENTITY NOT NULL,
	TIPO CHAR(3) NOT NULL,
	DDD CHAR(2) NOT NULL CHECK(LEN(DDD) = 2),
	TELEFONE CHAR(9) NOT NULL CHECK(LEN(TELEFONE) > 7),
	FK_PESSOA_TELEFONE INT NOT NULL,
	PRIMARY KEY(ID_TELEFONE),
	FOREIGN KEY(FK_PESSOA_TELEFONE) REFERENCES PESSOA(ID_PESSOA)
)
GO

/*CRIAR TABELA FUNCIONARIO*/
CREATE TABLE FUNCIONARIO(
	ID_FUNCIONARIO INT IDENTITY NOT NULL,
	CARGO VARCHAR(30) NOT NULL,
	MATRICULA VARCHAR(5) NOT NULL,
	DATA_ADMISSAO DATETIME NOT NULL,
	FK_PESSOA_fUNCIONARIO INT NOT NULL UNIQUE,
	PRIMARY KEY(ID_FUNCIONARIO),
	FOREIGN KEY(FK_PESSOA_FUNCIONARIO) REFERENCES PESSOA(ID_PESSOA)
)
GO

/*CRIAR TABELA USUARIO */
CREATE TABLE USUARIO(
	ID_USUARIO INT IDENTITY NOT NULL,
	LOGIN VARCHAR(15) UNIQUE NOT NULL,
	SENHA VARCHAR(30) NOT NULL,
	FK_FUNCIONARIO_USUARIO INT NOT NULL UNIQUE,
	PRIMARY KEY(ID_USUARIO),
	FOREIGN KEY(FK_FUNCIONARIO_USUARIO) REFERENCES FUNCIONARIO(ID_FUNCIONARIO)
)
GO

/* CRIAR TABELA CLIENTE*/
CREATE TABLE CLIENTE(
	ID_CLIENTE INT IDENTITY NOT NULL,
	DATA_CADASTRO DATETIME NOT NULL,
	FK_PESSOA_CLIENTE INT NOT NULL UNIQUE,
	PRIMARY KEY(ID_CLIENTE),
	FOREIGN KEY(FK_PESSOA_CLIENTE) REFERENCES PESSOA(ID_PESSOA)
)
GO

/*CRIAR TABELA LIVRO*/
CREATE TABLE LIVRO(
	ID_LIVRO INT IDENTITY NOT NULL,
	TITULO VARCHAR(200) NOT NULL,
	ISBN VARCHAR(13) NOT NULL UNIQUE,
	GENERO VARCHAR(150) NOT NULL,
	EDICAO VARCHAR(3) NOT NULL,
	ANO CHAR(4) NOT NULL,
	PRECO_ATUAL INT NOT NULL,
	QTS_ESTOQUE INT NOT NULL CHECK(QTS_ESTOQUE >= 0 ),
	IDIOMA VARCHAR(30) NOT NULL,
	DESCRICAO VARCHAR(MAX), 
	PRIMARY KEY(ID_LIVRO),
	
)
GO

/*CRIAR TABELA AUTOR*/
CREATE TABLE AUTOR(
	ID_AUTOR INT IDENTITY NOT NULL,
	NOME VARCHAR(150) NOT NULL UNIQUE,
	NACIONALIDADE VARCHAR(50) NOT NULL,
	PRIMARY KEY(ID_AUTOR)
)
GO

/*CRIAR TABELA LIVRO/AUTOR*/
CREATE TABLE LIVRO_AUTOR(
	ID_LIVRO_AUTOR INT IDENTITY NOT NULL,
	FK_LIVRO_LIVRO_AUTOR INT NOT NULL,
	FK_AUTOR_LIVRO_AUTOR INT NOT NULL,
	PRIMARY KEY(ID_LIVRO_AUTOR),
	FOREIGN KEY(FK_LIVRO_LIVRO_AUTOR) REFERENCES LIVRO(ID_LIVRO),
	FOREIGN KEY(FK_AUTOR_LIVRO_AUTOR) REFERENCES AUTOR(ID_AUTOR),
)
GO

/*CRIAR TABELA PREÇO*/
CREATE TABLE PRECO(
	ID_PRECO INT IDENTITY NOT NULL,
	DATA_PRECO DATETIME,
	VALOR DECIMAL(6,2) NOT NULL CHECK(VALOR >= 0),
	FK_LIVRO_PRECO INT NOT NULL,
	PRIMARY KEY(ID_PRECO),
	FOREIGN KEY(FK_LIVRO_PRECO) REFERENCES LIVRO(ID_LIVRO)
)
GO

-- CRIA TABELA VENDA
CREATE TABLE VENDA(
	ID_VENDA INT IDENTITY NOT NULL,
	DATA_VENDA DATETIME NOT NULL,
	FK_CLIENTE_VENDA INT NOT NULL,
	PRIMARY KEY(ID_VENDA),
	FOREIGN KEY(FK_CLIENTE_VENDA) REFERENCES CLIENTE(ID_CLIENTE)
)

-- CRIA TABELA ITENS VENDA
CREATE TABLE ITENS_VENDA(
	FK_VENDA_ITENSVENDA INT NOT NULL,
	FK_LIVRO_ITENSVENDA INT NOT NULL,
	FOREIGN KEY(FK_VENDA_ITENSVENDA) REFERENCES VENDA(ID_VENDA),
	FOREIGN KEY(FK_LIVRO_ITENSVENDA) REFERENCES LIVRO(ID_LIVRO)
)

/* INSERIR  ENDEREÇO */
INSERT INTO ENDERECO VALUES
('ALAMEDA GOIAS', 250,'JD PAULISTA', 'SÃO PAULO', 'SP', 'AP 780', '01235952' ),
('ITAQUERA', 50,'JD FIM DO MUNDO', 'SÃO PAULO', 'SP', 'CJ 2', '51236521' ),
('GOIAS', 50,'JD OUTRO', 'SÃO PAULO', 'SP', 'CJ 5', '71236521' )

/* INSERIR PESSOA */

INSERT INTO PESSOA VALUES
('JOAO DA SILVA', '12345678901','JOÃO@EMAIL.COM','05-16-1985', 1),
('ARISTEU', '13526352635','ARISTEU@EMAIL.COM','01-30-1980', 2),
('ADRIANO', '98765432432','ADRIANO@EMAIL.COM','01-30-1989', 3)

/* INSERIR TELEFONE*/
INSERT INTO TELEFONE VALUES
('CEL', '11','985623522', 1),
('CEL', '11','951236542', 2),
('CEL', '11','951236542', 3)

/* INSERIR FUNCIONARIO */
INSERT INTO FUNCIONARIO VALUES
('GERENTE','1235','11-25-2015',1)

/*INSERIR USUARIO*/
INSERT INTO USUARIO VALUES
('JOAO', 'senha',1)

/*INSERIR CLIENTE */
INSERT INTO CLIENTE VALUES
('10-20-2020',2),
('10-20-2020',3)

/* INSERIR LIVRO*/
INSERT INTO LIVRO VALUES
('MEU PRIMEIRO LIVRO','123','TERRO','1','2010',1,10,'ALEMÃO','PENSA EM UM LIVRO CHATO, É ESTE'),
('MEU sEGUNDO LIVRO','456','TERRO','2','2012',2,50,'ITALIANO','CHATO TB O SEGUNDO')

/* INSERER PREÇO */
INSERT INTO PRECO VALUES
(GETDATE(), 25.23,1),
(GETDATE(), 50.00,2)


/*INSERIR AUTOR*/
INSERT INTO AUTOR VALUES
('VERUSKS', 'ALEMÃO'),
('ZE LINDINHO', 'ITALIANO')

/*INSERIR LUVRO_AUTOR*/
INSERT INTO LIVRO_AUTOR VALUES
(1,2),
(2,1)


/*INSERIR UMA VENDA*/
INSERT INTO VENDA VALUES
(GETDATE(), 1)

-- INSERIR ITENS VENDA
INSERT INTO ITENS_VENDA VALUES
(1,1),
(1,2)


-----------------------------------------------------------------------------------

-- LIVRO DAO

-- MÉTODO buscaLivro
SELECT l.ID_LIVRO, p.VALOR AS PRECO , l.TITULO, a.NOME AS AUTOR , l.ISBN,l.GENERO, l.EDICAO, l.ANO,l.QTS_ESTOQUE,l.IDIOMA, l.DESCRICAO
FROM LIVRO l INNER JOIN LIVRO_AUTOR la
ON l.ID_LIVRO = la.FK_LIVRO_LIVRO_AUTOR
INNER JOIN AUTOR a
ON a.ID_AUTOR = la.FK_AUTOR_LIVRO_AUTOR 
INNER JOIN PRECO p
ON p.ID_PRECO = l.PRECO_ATUAL
WHERE l.TITULO LIKE  ?
WHERE l.ISBN LIKE ?
WHERE a.NOME LIKE ?

-- MÉTODO atualizaEstoque
UPDATE LIVRO
SET QTS_ESTOQUE = ?
WHERE ID_LIVRO = ?

-- MÉTODO buscaLivroTitulo
SELECT l.ID_LIVRO , l.TITULO , l.ISBN , l.GENERO , l.EDICAO , l.ANO , 
l.PRECO_ATUAL, l.QTS_ESTOQUE , l.IDIOMA , l.DESCRICAO
FROM LIVRO l
WHERE l.TITULO LIKE ?

-- MÉTODO alteraPrecoLivro
update LIVRO set Preco_Atual = ? where ID_LIVRO = ?

-----------------------------------------------------------------------------------

-- CLIENTE DAO

-- MÉTODO insereCliente
INSERT INTO CLIENTE VALUES ( GETDATE(), ?)

-- MÉTODO atualizaCliente
UPDATE CLIENTE c SET nome = ? WHERE c.FK_PESSOA_CLIENTE = ?

-- MÉTODO excluiCliente
DELETE CLIENTE c WHERE c.FK_PESSOA_CLIENTE = ?

-- MÉTODO buscaClienteNome
Select c.ID_CLIENTE,p.ID_PESSOA,p.NOME,p.EMAIL,p.CPF,p.DATA_NASCIMENTO,
c.DATA_CADASTRO, c.FK_PESSOA_CLIENTE,p.FK_EDERECO_PESSOA AS FK_ENDERECO
From CLIENTE c INNER JOIN PESSOA p
ON C.FK_PESSOA_CLIENTE = P.ID_PESSOA
WHERE p.NOME LIKE ?

-- MÉTODO buscaClienteCpf
Select c.ID_CLIENTE,p.ID_PESSOA,p.NOME,p.EMAIL,p.CPF,p.DATA_NASCIMENTO,
c.DATA_CADASTRO, c.FK_PESSOA_CLIENTE,p.FK_EDERECO_PESSOA AS FK_ENDERECO
From CLIENTE c INNER JOIN PESSOA p
ON C.FK_PESSOA_CLIENTE = P.ID_PESSOA
WHERE p.CPF = ?

-----------------------------------------------------------------------------------

-- ENDERECO DAO

-- MÉTODO insereEndereco
INSERT INTO ENDERECO VALUES(?,?,?,?,?,?,?)

-----------------------------------------------------------------------------------

-- FUNCIONARIO DAO

-- MÉTODO insereFuncionario
INSERT INTO FUNCIONARIO VALUES(?,?,?,?)

-- MÉTODO buscaFuncionarioId
SELECT ID_FUNCIONARIO, CARGO, MATRICULA, DATA_ADMISSAO,
FK_PESSOA_FUNCIONARIO FROM FUNCIONARIO  WHERE ID_FUNCIONARIO = ?

-- MÉTODO buscaFuncionarioNome
select * from FUNCIONARIO f, PESSOA p
where f.FK_PESSOA_fUNCIONARIO = p.ID_PESSOA and NOME like ?

-- MÉTODO getListaFuncionario()
SELECT p.NOME,f.*
FROM FUNCIONARIO f, PESSOA p where f.FK_PESSOA_fUNCIONARIO = p.ID_PESSOA

-----------------------------------------------------------------------------------

-- ITENS VENDA DAO

-- MÉTODO insereLivro
INSERT INTO ITENS_VENDA VALUES (" + idVenda + ", ?)

-----------------------------------------------------------------------------------

-- PESSOA DAO

-- MÉTODO inserePessoa
INSERT INTO PESSOA VALUES(?,?,?,?,?)

-- MÉTODO buscaPessoa
select ID_PESSOA,CPF from Pessoa where CPF = ?

-- MÉTODO verificaDuplicCpf
select CPF from Pessoa where CPF = ?

-- MÉTODO verificaDuplicEmail
select EMAIL from Pessoa where EMAIL = ?

-----------------------------------------------------------------------------------

-- PRECO DAO

-- MÉTODO inserirPreco
INSERT INTO PRECO VALUES( GETDATE(), ? ,?)

-- MÉTODO buscaPrecoId
SELECT p.ID_PRECO, p.DATA_PRECO, p.VALOR, p.FK_LIVRO_PRECO
FROM PRECO p
WHERE p.ID_PRECO = ?

-----------------------------------------------------------------------------------

-- TELEFONE DAO

-- MÉTODO insereTelefone
INSERT INTO TELEFONE VALUES(?,?,?,?)

-----------------------------------------------------------------------------------

-- USUARIO DAO

-- MÉTODO insereUsuario
INSERT INTO USUARIO VALUES(?,?,?)

-- MÉTODO alteraUsuario
update USUARIO set LOGIN = ?,SENHA = ? WHERE FK_FUNCIONARIO_USUARIO = ?

-- MÉTODO deletarUsuario
Delete from USUARIO where ID_USUARIO = ?

-- MÉTODO buscaUsuarioUsuario
SELECT ID_USUARIO, LOGIN, SENHA,FK_FUNCIONARIO_USUARIO FROM USUARIO WHERE LOGIN = ?

-- MÉTODO buscaUsuario
SELECT ID_USUARIO, LOGIN, SENHA,FK_FUNCIONARIO_USUARIO FROM USUARIO WHERE LOGIN = ?

-- MÉTODO buscaListaUsuarios
SELECT ID_USUARIO, LOGIN, SENHA,FK_FUNCIONARIO_USUARIO FROM USUARIO

-- MÉTODO atualizarSenha
UPDATE USUARIO SET SENHA = ? WHERE ID_USUARIO = ?

-----------------------------------------------------------------------------------

-- VENDA DAO 

-- MÉTODO inserirVenda
INSERT INTO VENDA VALUES( GETDATE(), ?)

-----------------------------------------------------------------------------------